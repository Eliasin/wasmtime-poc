variant quality-of-service {
  at-most-once,
  at-least-once,
  exactly-once,
}

publish-sync: func(topic: string, qos: quality-of-service, retain: bool, payload: list<u8>) -> expected<unit, string>

subscribe-sync: func(topic: string, qos: quality-of-service) -> expected<unit, string>

record publish-event {
  topic: string,
  payload: list<u8>,
}

variant incoming-event {
  connect,
  conn-ack,
  publish(publish-event),
  pub-ack,
  pub-rec,
  pub-rel,
  pub-comp,
  subscribe,
  sub-ack,
  unsubscribe,
  unsub-ack,
  ping-req,
  ping-resp,
  disconnect,
}

variant outgoing-event {
  publish(u16),
  subscribe(u16),
  unsubscribe(u16),
  pub-ack(u16),
  pub-rec(u16),
  pub-rel(u16),
  pub-comp(u16),
  ping-req,
  ping-resp,
  disconnect,
  await-ack(u16),
}

variant event {
  incoming(incoming-event),
  outgoing(outgoing-event),
}

poll-sync: func() -> expected<list<expected<event, string>>, string>
